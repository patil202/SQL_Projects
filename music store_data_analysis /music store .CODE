# Q1: Who is the senior most employee based on job title?


SELECT title, first_name, last_name FROM employee

ORDER by levels DESC

limit 1;



Q2: Which countries have the most Invoices?



SELECT count(*) as c, billing_country

FROM invoice

GROUP by billing_country

ORDER by c DESC

LIMIT 1;



Q3: What are top 3 values of total invoice?



SELECT total 

FROM invoice

ORDER by total DESC

LIMIT 3;



Q4: Which city has the best customers? We would like to throw a promotional Music Festival in the city we made the most money. 

Write a query that returns one city that has the highest sum of invoice totals. 

Return both the city name &amp; sum of all invoice totals



SELECT billing_city, sum(total) as invoice_total

FROM invoice

GROUP by billing_city

ORDER by invoice_total DESC

LIMIT 1; 



Q5: Who is the best customer? The customer who has spent the most money will be declared the best customer. 

Write a query that returns the person who has spent the most money.



SELECT customer.customer_id, customer.first_name, customer.last_name, sum(invoice.total) as total

FROM customer

JOIN invoice on customer.customer_id = invoice.customer_id

GROUP by customer.customer_id

ORDER by total DESC

LIMIT 1;



Q6: Write query to return the email, first name, last name, &amp; Genre of all Rock Music listeners. 

Return your list ordered alphabetically by email starting with A.



SELECT DISTINCT email AS Email,first_name AS FirstName, last_name AS LastName, genre.name AS Name

FROM customer

JOIN invoice ON invoice.customer_id = customer.customer_id

JOIN invoice_line ON invoice_line.invoice_id = invoice.invoice_id

JOIN track ON track.track_id = invoice_line.track_id

JOIN genre ON genre.genre_id = track.genre_id

WHERE genre.name LIKE 'Rock'

ORDER BY email;





Q7: Lets invite the artists who have written the most rock music in our dataset. 

Write a query that returns the Artist name and total track count of the top 10 rock bands.



SELECT artist.artist_id, artist.name,COUNT(artist.artist_id) AS number_of_songs

FROM track

JOIN album ON album.album_id = track.album_id

JOIN artist ON artist.artist_id = album.artist_id

JOIN genre ON genre.genre_id = track.genre_id

WHERE genre.name = 'Rock'

GROUP BY artist.artist_id

ORDER BY number_of_songs DESC

LIMIT 10;



Q8: Return all the track names that have a song length longer than the average song length. 

Return the Name and Milliseconds for each track. Order by the song length with the longest songs listed first.



SELECT AVG(milliseconds) AS avg_track_length

FROM track



SELECT name, milliseconds

FROM track

WHERE milliseconds &gt; (SELECT AVG(milliseconds) AS avg_track_length

FROM track)

ORDER by milliseconds DESC;











</sql><current_tab id="0"/></tab_sql></sqlb_project>

